(car '(a 2 3 4))
"1234"
(cons 1 '(1 2 3 4))
(car '('a 2 3 4))
(cons 1 '(1 2 3 4))
(car '('a 2 3 4))
"1234"
(define a 5)
'("a" "b")
(car '((1) 2 3 4))
'("a" "b")
(car '((1) 2 3 4))
(car '('a 2 3 4))
(cons 1 '(1 2 3 4))
(car '(a 2 3 4))
(+ 1 2 3 4)
(+ 2 (+ 3 (* 2 3)))
(define pi 3.14)
pi
(cons '(1 2 3 4) '(5 6 7))
(define a (cons '(1 2 3 4) '(5 6 7)))
a
'(1 2 3 4)
(define a (cons '(1 2 3 4) '(5 6 7)))
a
(define pi 3.14)
pi
(length '(1 2 3 4 5))
(length '((1 2) 3 4))
(null? '(1 2))
(null? '())
(null? '(1 2))
(length '(1 2))
(null? '(1 2))
(and #t #f)
(null? '(1 2))
(null? '())
(null? '(1 2))
(null? '())
(and #t #f)
(null? '())
(null? '(1 2))
(and 1 0)
(or 2 0 1)
(cons 1 (cons 2 '(3 4)))
(car (cons 1 (cons 2 '(3 4))))
(+ 1 2)
(car (cons 1 (cons 2 '(3 4))))
(and 1 0)
(null? '())
(define a 6)
a
((lambda (a b) (+ b a)) 3 4)
(+ 1 2)
( ( (lambda (a) (lambda (b) (+ a b))) 5) 7)
(lambda (a) a)
( ( (lambda (a) (lambda (b) (+ a b))) 5) 7)
(lambda (a) a)
( ( (lambda (a) (lambda (b) (+ a b))) 5) 7)
(lambda (a) a)
(+ 1 2)
(define a 6)
a
(define pi 3.14)
(+ pi a)
(define pi 3.14)
(define a 6)
(+ pi a)
(define a 6)
a
(define a (+ 1 2))
(define b (+ a 1))
(define (sum x y) (+ x y))
(sum 3 4)
(define (sum x y) (+ x y))
(define (multi x y) (* x y))
(multi (sum 3 4) 2)
(multi (multi 3 4) 2)
(apply + (cons 1 '(1 2 3 4))
(cons 1 '(1 2 3 4))
(apply * '(1 2 3 4))
(apply - '(1 2 3 4))
(cdr '(1 2 3 4))
(cdr (cons 1 '(1 2 3 4)))
(apply + (cdr (cons 1 '(1 2 3 4))))
(append '(1 2 3) '(5 6))
(define a '(1 2 3))
a
(define b '(4 5))
b
(append a b)
a
(append a '(5))
(append a '())
(define b '(4 5))
(define a '(1 2 3))
(append a '())
(define a '(1 2 3))
(append a '(5))
